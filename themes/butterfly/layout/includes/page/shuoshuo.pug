//- - author:
//-   avatar:
//-   date:
//-   content:
//-   tags:
//-     - tag1
//-     - tag2

- page.toc = false

//- 检查是否有加密的shuoshuo条目
- let hasEncrypted = false
if site.data.shuoshuo
  each i in site.data.shuoshuo
    if i.encrypted
      - hasEncrypted = true

#article-container
  if page.comments !== false && theme.comments.use
    - commentsJsLoad = true

    script.
      (() => {
        const commentDiv = `!{partial('includes/third-party/comments/index', {}, {cache: true})}`

        const runDestroy = (shuoshuoComment) => {
          if (!shuoshuoComment) return

          for (const [key, fn] of Object.entries(shuoshuoComment)) {
            if (key.startsWith('destroy')) fn()
          }
        }

        window.addCommentToShuoshuo = e => {
          const btn = e.target.closest('.shuoshuo-comment-btn')
          if (!btn) return

          const ele = btn.closest('.container').nextElementSibling
          const { shuoshuoComment } = window
          const isInclude = ele.classList.contains('no-comment')
          runDestroy(shuoshuoComment)
          if (isInclude) {
            ele.classList.remove('no-comment')
            ele.innerHTML = commentDiv
            const key = `${location.pathname.replace(/\/$/, '')}?key=${ele.getAttribute('data-key')}`
            btf.switchComments(ele, key)
            shuoshuoComment.loadComment && shuoshuoComment.loadComment(ele, key)
          }
        }
      })()

  if page.shuoshuo_url
    script.
      (() => {
        const limitConfig = !{ JSON.stringify(page.limit || {}) }

        const sortDataByDate = data => data.sort((a, b) => new Date(b.date) - new Date(a.date))

        const filterDataByLimit = (data, limit) => {
          if (!limit || !limit.type) return data
          if (limit.type === 'num') return data.slice(0, limit.value)
          if (limit.type === 'date') {
            const limitDate = new Date(limit.value)
            return data.filter(item => new Date(item.date) >= limitDate)
          }
          return data
        };

        const formatToTimeZone = (date) => {
          const fullDate = date.length === 10 ? `${date} 00:00:00` : date
          const visitorTimeZone = '#{config.timezone}' || Intl.DateTimeFormat().resolvedOptions().timeZone
          const options = {
            timeZone: visitorTimeZone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
          }
          const [day, month, year, hour, minute, second] = new Intl.DateTimeFormat('en-GB', options)
            .format(new Date(fullDate))
            .match(/\d+/g)
          return `${year}-${month}-${day} ${hour}:${minute}:${second}`
        }

        const loadShuoshuo = async () => {
          try {
            const response = await fetch('!{url_for(page.shuoshuo_url)}')
            let data = await response.json()

            data = filterDataByLimit(sortDataByDate(data), limitConfig)

            const container = document.getElementById('article-container')
            let start = 0

            // 增强的markdown渲染函数
            const renderMarkdown = (text) => {
              if (!text) return ''

              let result = text
                // 处理代码块 ```code```
                .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
                // 处理行内代码 `code`
                .replace(/`([^`]+)`/g, '<code>$1</code>')
                // 处理粗体 **text**
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                // 处理斜体 *text*（避免与粗体冲突）
                .replace(/(?<!\*)\*([^*]+)\*(?!\*)/g, '<em>$1</em>')
                // 处理删除线 ~~text~~
                .replace(/~~(.*?)~~/g, '<del>$1</del>')
                // 处理链接 [text](url)
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>')
                // 处理图片 ![alt](url)
                .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" loading="lazy">')
                // 处理标题 # ## ###
                .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                .replace(/^# (.*$)/gm, '<h1>$1</h1>')
                // 处理无序列表
                .replace(/^\* (.*$)/gm, '<li>$1</li>')
                .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
                // 处理有序列表
                .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
                // 处理换行（最后处理）
                .replace(/\n/g, '<br>')

              return result
            }

            const renderData = (dataSlice) => {
              const content = dataSlice.map(item => {
                const formattedDate = formatToTimeZone(item.date)
                const tags = item.tags && item.tags.map(tag => `<span class="shuoshuo-tag">${tag}</span>`).join('') || ''
                const commentButton = item.key && !{commentsJsLoad}
                  ? `<div class="shuoshuo-comment-btn" onclick="addCommentToShuoshuo(event)">
                      <i class="fa-solid fa-comments"></i>
                    </div>`
                  : ''
                const commentContainer = item.key
                  ? `<div class="shuoshuo-comment no-comment" data-key="${item.key}"></div>`
                  : ''

                // 渲染markdown内容
                const renderedContent = renderMarkdown(item.content)

                return `
                  <div class="shuoshuo-item">
                    <div class="shuoshuo-toggle" onclick="toggleShuoshuo(this)"></div>
                    <div class="container">
                      <div class="shuoshuo-item-header">
                        <div class="shuoshuo-avatar">
                          <img class="no-lightbox" src="${item.avatar || '!{url_for(theme.avatar.img)}'}">
                        </div>
                        <div class="shuoshuo-info">
                          <div class="shuoshuo-author">${item.author || '!{config.author}'}</div>
                          <time class="shuoshuo-date" title="${formattedDate}">
                            ${btf.diffDate(formattedDate, true)}
                          </time>
                        </div>
                      </div>
                      <div class="shuoshuo-content">${renderedContent}</div>
                      <div class="shuoshuo-footer ${tags ? 'flex-between' : 'flex-end'}">
                        ${tags ? `<div class="shuoshuo-tags">${tags}</div>` : ''}
                        ${commentButton}
                      </div>
                    </div>
                    ${commentContainer}
                  </div>`
              }).join('')

              container.insertAdjacentHTML('beforeend', content)

              window.lazyLoadInstance.update()
              btf.loadLightbox(document.querySelectorAll('#article-container img:not(.no-lightbox)'))
            }

            const handleIntersection = (entries) => {
              if (!entries[0].isIntersecting) return
              observer.unobserve(entries[0].target)

              const slice = data.slice(start, start + 10)
              renderData(slice)
              start += 10

              if (start < data.length) {
                setTimeout(() => observer.observe(container.lastElementChild), 100)
              } else {
                observer.disconnect()
              }
            };

            const observer = new IntersectionObserver(handleIntersection, {
              root: null,
              rootMargin: '0px',
              threshold: 1.0
            })

            renderData(data.slice(start, 10))
            start += 10

            if (container.lastElementChild) observer.observe(container.lastElementChild)
          } catch (error) {
            console.error(error)
          }
        };

        window.pjax ? loadShuoshuo() : window.addEventListener('load', loadShuoshuo)
      })()
  else
    if site.data.shuoshuo
      - let shuoshuoList = shuoshuoFN(site.data.shuoshuo, page)
      - let shuoshuoByYearMonth = {}

      //- 按年月分组
      each i in shuoshuoList
        - let date = new Date(i.date)
        - let year = date.getFullYear()
        - let month = date.getMonth() + 1
        - let yearMonth = year + '-' + (month < 10 ? '0' + month : month)
        - if (!shuoshuoByYearMonth[yearMonth]) shuoshuoByYearMonth[yearMonth] = []
        - shuoshuoByYearMonth[yearMonth].push(i)

      //- 按年月倒序排列
      - let yearMonths = Object.keys(shuoshuoByYearMonth).sort((a, b) => b.localeCompare(a))
      - let currentYear = null

      each yearMonth in yearMonths
        - let [year, month] = yearMonth.split('-')
        - let monthNames = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
        - let monthName = monthNames[parseInt(month) - 1]

        //- 如果是新的年份，显示年份标题
        if currentYear !== year
          - currentYear = year
          .shuoshuo-year-title
            h2= year + ' 年'

        //- 显示月份标题
        .shuoshuo-month-title
          h3= monthName

        each i in shuoshuoByYearMonth[yearMonth]
          .shuoshuo-item
            .container
              .shuoshuo-item-header
                .shuoshuo-avatar
                  img.no-lightbox(src=i.avatar || url_for(theme.avatar.img))
                .shuoshuo-info
                  .shuoshuo-author=i.author || config.author
                  time.shuoshuo-date(title=i.date)=i.date
              .shuoshuo-content
                if i.encrypted
                  - const encryptConfig = i.encrypt_config || {}
                  - const theme = encryptConfig.theme || 'xray'
                  - const uniqueId = 'shuoshuo-encrypt-' + i.key
                  .hbe.hbe-container(id=uniqueId data-wpm=encryptConfig.wrong_pass_message data-whm=encryptConfig.wrong_hash_message)
                    script(id="hbeData" type="hbeData" data-hmacdigest=i.hmac_digest)=i.encrypted_data
                    .hbe.hbe-content
                      .hbe.hbe-input(class='hbe-input-' + theme)
                        input.hbe.hbe-input-field(class='hbe-input-field-' + theme type="password" id="hbePass")
                        label.hbe.hbe-input-label(class='hbe-input-label-' + theme for="hbePass")
                          span.hbe.hbe-input-label-content(class='hbe-input-label-content-' + theme)=encryptConfig.message
                        if theme === 'xray'
                          svg.hbe.hbe-graphic.hbe-graphic-xray(width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none")
                            path(d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0")
                            path(d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0")
                else
                  !=markdown(i.content)
              if !i.encrypted
                .shuoshuo-footer(class=i.tags && i.tags.length ? 'flex-between' : 'flex-end')
                  if i.tags
                    .shuoshuo-tags
                      each tag in i.tags
                        span.shuoshuo-tag=tag
                  if i.key && commentsJsLoad
                    .shuoshuo-comment-btn(onclick='addCommentToShuoshuo(event)')
                      i.fa-solid.fa-comments
            if i.key && commentsJsLoad && !i.encrypted
              .shuoshuo-comment.no-comment(data-key=i.key)

//- 如果有加密内容，引入相关资源
if hasEncrypted
  link(href=url_for('/css/hbe.style.css') rel="stylesheet" type="text/css")
  script.
    // 提供shuoshuo数据给解密脚本使用
    window.shuoshuoData = {};
    window.commentsJsLoad = #{commentsJsLoad || false};
    !{site.data.shuoshuo ? site.data.shuoshuo.map(item => `window.shuoshuoData['${item.key}'] = ${JSON.stringify({key: item.key, tags: item.tags || [], author: item.author})};`).join('\n    ') : ''}

script.
  // 说说折叠功能
  function toggleShuoshuo(button) {
    const item = button.closest('.shuoshuo-item');
    if (item) {
      item.classList.toggle('collapsed');
    }
  }

  // 页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', function() {
    // 为所有现有的说说项添加折叠按钮（如果没有的话）
    const items = document.querySelectorAll('.shuoshuo-item');
    items.forEach(item => {
      if (!item.querySelector('.shuoshuo-toggle')) {
        const toggle = document.createElement('div');
        toggle.className = 'shuoshuo-toggle';
        toggle.onclick = function() { toggleShuoshuo(this); };
        item.insertBefore(toggle, item.firstChild);
      }
      // 默认展开状态，移除collapsed类
      item.classList.remove('collapsed');
    });
  });

script(data-pjax src=url_for('/js/shuoshuo-decrypt.js'))